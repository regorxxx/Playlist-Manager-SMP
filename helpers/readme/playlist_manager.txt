Manager for offline playlists. Shows a virtual list of all playlists 
files within a configured folder (PlaylistPath). After loading it on
a panel, set a tracked folder using the appropriate menu or check the
panel properties.

For example: (that's a folder within my foobar profile)
	C:\Users\XXX\AppData\Roaming\foobar2000\playlist_manager\server\
Autoplaylist json files are stored in your profile folder:
	foobar2000\js_data\
	
Playlists are saved with (tracks) absolute paths by default, you can 
change that behavior on the menus. When using relative paths, the tracks'
folders should be in the same path than the tracked folder. i.e.:
	Tracked Folder: Z:\My music\
	Music Folders: Z:\My music\CDs, Z:\My music\DVDs\, ...

Finally, you can import another Autoplaylist data file by this script or 
Auto-playlist Manager by marc2003 using the contextual menu.
Note: left shift + left windows key + right mouse click will open default 
context menu.

Features:
    + Manages Playlist files and AutoPlaylists.
        - Playlist files are linked to physical files 
		(.m3u8, .m3u, .pls, .xspf, .xsp or .fpl).
        - UI-only playlists can also be managed.
        - AutoPlaylists are saved into json format.
        - Works with shareable playlists (.xspf) 
		and Kodi-like smart playlists (.xsp).
        - All playlist are loaded in cache once, filtering just
		changes the "painted" playlist on the list.
        - Paths within the playlist may be absolute or relative
		to a folder (configurable).
    + AutoPlaylists: contains all functionality on Auto-playlist 
	Manager	by marc2003 plus more.
        - Create, rename, delete AutoPlaylists.
        - Edit query, sort pattern and sort forcing.
        - Adds tooltip info, UI features, filters, etc.
        - Number of tracks output is updated at foobar startup.
		(and/or 'at manual refresh')
        - Queries and sort patterns are checked for validity
		before using them, instead of crashing.
    + Smart Playlists: contains all functionality found on XBMC or Kodi:
        - Use XBMC or Kodi playlists within foobar seamlessly.
        - Multiple exporting options.
        - Allow to limit the number of tracks output by a query.
        - Allows to use other playlists as source (even AutoPlaylists)
		via queries.
        - Have the same advanced UI features than AutoPlaylists.
    + Complete documentation, FAQ and step by step guide (see 
	'readmes\playlist_manager.pdf').
    + Loads .m3u8, .m3u and .pls playlists x100 times faster than standard
	foobar (if all items are on library). i.e. "As fast as the native 
	format".
    + Auto-saves changes within foobar to bound playlists files. 
    + Automatically updates changes within the tracked folder.
    + New updates are delayed when performing internal updates/processing
	to avoid conflicts.
    + Multiple exporting options: directly compatible with Foobar2000 
	mobile,	Kodi and XBMC systems, etc.
        - Copy playlist file to location.
        - Export playlist file along its tracks.
        - Export playlist file and convert its tracks to another format
		(using Foobar2000 converter presets).
    + Bind playlist to physical files:
        - Tracks playlists for changes and update bound files.
        - Auto-saving (configurable).
        - Deleting the file also ask to delete the bound playlist.
        - Renaming the files also renames the bound playlist.
        - Show bound playlist (becomes active playlist).
    + Lock/unlock playlists (so they are read-only).
        - Automatically locking of native foobar playlists files (.fpl).
        - When locked, playlists can not be updated nor edited. 
		They can be deleted.
        - Filename can be changed, but not playlist name (inside the file).
		Allows to set different playlist and file names if
		required.
    + Playlist unique IDs. You can have multiple playlists with same name
	on the UI and bound to different files. (configurable)
        - Changing UUIDs config while having playlists already loaded,
		will defer UUID refresh until next update.
        - New UUID can also be forced just by renaming the files.
    + Show playlist size on the panel.
        - All (refresh AutoPlaylists queries)
        - Only standard playlist
        - No size
    + If you choose not to refresh AutoPlaylists sizes, then the first
	calculated size gets used: when imported from json or creating the
	AutoPlaylist.
    + Playlist Tags and actions:
        - Playlists may be tagged with 'bAutoLoad', 'bAutoLock'
		or a custom set of tags (for arbitrary purposes).
        - Auto-Functions: automatically applies some actions
		whenever a playlist is loaded on the panel according
		to the tags present on it.
            'bAutoLoad' makes the playlist to be loaded within 
			foobar automatically (on the UI). Meant to be used 
			on remote servers with online controllers.
            'bAutoLock' locks the playlist as soon as it's 
			loaded on the panel.
    + Track Auto-tagging: add tag values automatically to any track 
	added on playlist.
        - Can be configured separately for standard playlists,
		AutoPlaylists, locked playlists and individual playlists.
        - Standard playlists may be used to easily tag your 
		library just by sending them to the right playlist 
		(which don't need to be loaded at all).
        - AutoPlaylists Auto-tagging allows to automatically 
		(and periodically) apply some tagging logic to the 
		current library following some condition.
        - Multiple playlists may be used as pools, using a 
		final Autoplaylist which checks for an specific added
		tag (by other playlists -aka pools-).
        - Allows multiple inputs:
            º TF expressions (or %tags%).
            º JavaScript functions (defined at 'helpers_xxx_utils.js').
            º Value (string or number).
    + Tooltips show different playlist info:
        - Header with filters, categories and total number of playlists.
        - Gives a warning when tracks from current selection are
		already on the playlist file (duplicates).
        - Playlists:
            Name plus UUID.
            Playlist size (tracks). Also for AutoPlaylists (the number 
			of tracks output by the query).
            Category / Tag(s).
            Track Tag(s).
            Status (lock).
            Query. Sort Pattern. (AutoPlaylists) 
			Output limit. (Smart Playlists)
    + Filters:
        - Show All | Only AutoPlaylists & Smart Playlists | Only standard
		Playlists
        - Show All | Not locked | Only locked
        - By extension
        - By tag
        - By category
    + Sorting:
        - Name: Az | Za
        - Size: Ascd. | Desc.
        - Category: Az | Za
        - Tags (first one): Az | Za
        - Date: Az | Za
    + UUIDs: added to the name, so they are separated from non tracked
	playlist by name when loaded in foobar. Some also allow some level
	of names duplication.
        - Invisible Unicode chars plus (*)
        - (a-f)
        - (*)
        - Or none
    + Category filters: playlist may be filtered by category (like virtual
	folders), multiple selection allowed in a menu.
        - When lists are being filtered by category, an indicator is shown
		in the header text.
    + Additional tools for playlists:
        - Check -on demand- for dead items on playlists files (without
		having to load them on foobar!). 2
        - Check -on demand- for duplicate items on playlists files 
		(without having to load them on foobar!). 3
            º Before adding new tracks to a playlist file, duplicates
			may be filtered from selected tracks on real time.
        - Check -on demand- for playlists with mixed relative and absolute
		paths.
        - Check -on demand- for playlists with items not present on 
		library. 4
        - Check -on demand- for playlists with blank lines.
    + 4 different writable formats.
    + Filter (configurable) and sorting gets saved between reloads.
    + RecycleBin: deleting and restoring.
        - Uses timestamps to uniquely identify files: no collisions 
		with other files within the RecycleBin.
    + A backup of the previous playlist json file is created every time
	the panel is loaded. Old backups are sent to recycle bin.
    + Properties descriptions change according to things set on the panel,
	not just the values. i.e. if you change the sort method, then the 
	description reflects the associated states dynamically.
    + UI:
        - UI resizable on the fly.
        - Selection indicators.
        - Now playing and loaded playlist indicators.
        - Empty / not empty playlist indicators. To be used as 
		fallback when size is not shown.
        - Font Size (configurable).
        - Separators between different names/categories (configurable).
        - Ready to use presets. Also specific ones for Color Blindness
		(deuteranopia) and Grey Scale
        - Icons for different playlists types (configurable). Can 
		also be hidden.
        - Colors for different playlists types, status, text, 
		background and selection (configurable).
    + Shortcuts: modifiers allow to directly apply different actions
	on playlists. See manual.
    + Wine - Unix - non IE SOs compatible: all the UI, tools, popups,
	configuration and external helpers have been carefully designed to
	work in all systems without requiring IE installation, HTML popups
	or editing the panel properties. Scripts are expected to work 100% 
	the same in any SO.
    + Other scripts integration:
        - Playlist-Tools-SMP: Pools may use tracks from playlists 
		files tracked by the manager, not requiring to have 
		playlists loaded within foobar. i.e. Random Pools 
		component-like playlist	creation, using not only 
		queries as sources, but also other	playlists or
		playlists files.
        - ajquery-xxx: Online controller fully compatible with the manager,
		allows to browse playlist files, load, edit them, etc.
        - SMP Dynamic menus: playlist actions are also available as main
		menu entries -if enabled-, which allows to bind them to
		keyboard shortcuts, toolbar buttons or executing them 
		using command line.